name: 'Route-Bastion-Broker'

volumes:
  cache_data:
    driver: local
  db_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  default:
    driver: bridge
  metrics:
    driver: bridge

services:
  api-dev:
    container_name: 'api-dev'
    build:
      context: ${PWD}/Packages/routeBastion
      dockerfile: build/app.dev.Dockerfile
    ports:
      - 8080:8080
    environment:
      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317
      - OTEL_EXPORTER_JAEGER_ENDPOINT=http://jaeger:14268/api/traces
      - OTEL_EXPORTER_PROMETHEUS_PORT=9090
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    networks:
      - default
      - metrics
    volumes:
      - ../:/app

  database:
    image: bitnami/postgresql:17.2.0
    container_name: 'postgresql-db'
    restart: always
    ports:
      - 5432:5432
    environment:
      - POSTGRESQL_USERNAME=docker
      - POSTGRESQL_PASSWORD=docker
      - POSTGRESQL_POSTGRES_PASSWORD=docker
      - POSTGRESQL_DATABASE=route_bastion
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U docker -d route_bastion'"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - default
      - metrics
    volumes:
      - 'db_data:/bitnami/postgresql'

  cache:
    image: redis:7.4.2
    container_name: 'redis-cache'
    ports:
      - 6379:6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    volumes:
      - 'cache_data:/data'
    networks:
      - default
      - metrics

  grafana:
    image: grafana/grafana:latest
    container_name: 'grafana'
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - 3000:3000
    depends_on:
      - prometheus
      - jaeger
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - metrics

  prometheus:
    image: prom/prometheus:latest
    container_name: 'prometheus'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus.yml:ro
      - prometheus_data:/prometheus
    command: ["--config.file=/etc/prometheus.yml"]
    ports:
      - 9090:9090
    depends_on:
      - otel-collector
      - postgresql-exporter
      - redis-exporter
    networks:
      - metrics

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: 'jaeger'
    ports:
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5775:5775/udp"
      - "16686:16686" # UI port
      - "14268:14268"
      - "9411:9411" # Zipkin endpoint
    networks:
      - metrics

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: 'otel-collector'
    command: ["--config=/etc/otel-collector-config.yml"]
    volumes:
      - ./configs/otel-collector-config.yml:/etc/otel-collector-config.yml:ro
    ports:
      - "4317:4317"  # OTLP receiver for traces/metrics
      - "8889:8889"  # Metrics endpoint (Prometheus scrape) from the collector
    networks:
      - metrics

  postgresql-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: 'postgresql-exporter'
    environment:
      - DATA_SOURCE_URI=database:5432/route_bastion?sslmode=disable
      - DATA_SOURCE_USER=docker
      - DATA_SOURCE_PASS=docker
    ports:
      - "9187:9187"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - metrics

  redis-exporter:
    image: oliver006/redis_exporter
    container_name: 'redis-exporter'
    ports:
      - "9121:9121"
    command: ["--redis.addr=redis://cache:6379"]
    depends_on:
      cache:
        condition: service_healthy
    networks:
      - metrics
